// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  password           String
  image              String?
  points             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userProgress       UserProgress[]
  referrals          Referral[]          @relation("ReferredBy")
  earnedBadges       EarnedBadge[]
  earnedCertificates EarnedCertificate[]
  claimedRewards     ClaimedReward[]

  @@index([email])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int
  badgeId     String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
  badge       Badge?   @relation(fields: [badgeId], references: [id])

  @@index([badgeId])
  @@index([order])
}

model Task {
  id            String         @id @default(cuid())
  title         String
  description   String
  type          String // video, quiz, article, etc.
  moduleId      String
  content       Json? // Flexible content structure based on task type
  points        Int            @default(0)
  estimatedTime Int? // in minutes
  order         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  module        Module         @relation(fields: [moduleId], references: [id])
  progress      UserProgress[]

  @@index([moduleId])
  @@index([order])
}

model Badge {
  id                      String        @id @default(cuid())
  title                   String
  description             String
  imageUrl                String
  points                  Int           @default(100)
  requiredToComplete      String[] // Array of module IDs required to earn this badge
  modules                 Module[]
  earnedBy                EarnedBadge[]
  certificateRequirements Certificate[] @relation("BadgesToCertificates")
  rewardsBadgeBased       Reward[]      @relation("BadgeRewards")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@index([title])
  @@index([points])
}

model Certificate {
  id             String              @id @default(cuid())
  title          String
  description    String
  imageUrl       String
  badgesRequired Badge[]             @relation("BadgesToCertificates")
  earnedBy       EarnedCertificate[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([title])
}

model Reward {
  id            String          @id @default(cuid())
  title         String
  description   String
  type          String // badge or point
  badgeRequired Badge?          @relation("BadgeRewards", fields: [badgeId], references: [id])
  badgeId       String?
  pointCost     Int?
  claimedBy     ClaimedReward[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([badgeId])
  @@index([type])
  @@index([pointCost])
}

model EarnedBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  badge    Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
}

model EarnedCertificate {
  id            String      @id @default(cuid())
  userId        String
  certificateId String
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  certificate   Certificate @relation(fields: [certificateId], references: [id])

  @@unique([userId, certificateId])
  @@index([userId])
  @@index([certificateId])
  @@index([earnedAt])
}

model ClaimedReward {
  id        String   @id @default(cuid())
  userId    String
  rewardId  String
  claimedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  reward    Reward   @relation(fields: [rewardId], references: [id])

  @@unique([userId, rewardId])
  @@index([userId])
  @@index([rewardId])
  @@index([claimedAt])
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  taskId      String
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int? // For quiz-type tasks
  timeSpent   Int? // in seconds
  answers     Json? // Store user's answers
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([completed])
  @@index([startedAt])
  @@index([completedAt])
}

model Referral {
  id            String   @id @default(cuid())
  referrerId    String
  referredEmail String
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  referrer      User     @relation("ReferredBy", fields: [referrerId], references: [id])

  @@index([referrerId])
  @@index([status])
  @@index([createdAt])
}
