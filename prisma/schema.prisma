// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userProgress  UserProgress[]
  referrals     Referral[] @relation("ReferredBy")
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String
  order       Int
  badgeId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
  badge       Badge?    @relation(fields: [badgeId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  type        String    // video, quiz, article, etc.
  moduleId    String
  content     Json?     // Flexible content structure based on task type
  points      Int       @default(0)
  estimatedTime Int?    // in minutes
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  module      Module    @relation(fields: [moduleId], references: [id])
  progress    UserProgress[]
}

model Badge {
  id          String    @id @default(cuid())
  title       String
  description String
  imageUrl    String
  modules     Module[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  taskId      String
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?      // For quiz-type tasks
  timeSpent   Int?      // in seconds
  answers     Json?     // Store user's answers
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}

model Referral {
  id            String    @id @default(cuid())
  referrerId    String
  referredEmail String
  status        String    @default("pending") // pending, accepted, declined
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  referrer      User      @relation("ReferredBy", fields: [referrerId], references: [id])
} 