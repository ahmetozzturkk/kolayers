// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userProgress  UserProgress[]
  referrals     Referral[] @relation("ReferredBy")
  earnedBadges  EarnedBadge[]
  earnedCertificates EarnedCertificate[]
  claimedRewards ClaimedReward[]
  points        Int       @default(0)
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String
  order       Int
  badgeId     String?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
  badge       Badge?    @relation(fields: [badgeId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  type        String    // regular, reading, quiz, application, video, referral
  moduleId    String
  content     Json?     // Flexible content structure based on task type
  points      Int       @default(0)
  estimatedTime Int?    // in minutes
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  module      Module    @relation(fields: [moduleId], references: [id])
  progress    UserProgress[]
}

model Badge {
  id                 String    @id @default(cuid())
  title              String
  description        String
  imageUrl           String
  backgroundColor    String?   // hexadecimal color code
  icon               String?   // emoji icon
  points             Int       @default(0)
  requiredToComplete String[]  // Array of module IDs required to complete
  modules            Module[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  earnedBy           EarnedBadge[]
  certificates       CertificateBadgeRequirement[]
  rewardsBadgeRequirement Reward[] @relation("BadgeRequirement")
}

model Certificate {
  id           String    @id @default(cuid())
  title        String
  description  String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  badgesRequired CertificateBadgeRequirement[]
  earnedBy     EarnedCertificate[]
}

model CertificateBadgeRequirement {
  certificateId String
  badgeId       String
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  badge         Badge      @relation(fields: [badgeId], references: [id])

  @@id([certificateId, badgeId])
}

model Reward {
  id            String    @id @default(cuid())
  title         String
  description   String
  imageUrl      String?
  type          String    // badge, point
  pointCost     Int?      // Cost in points for point-based rewards
  badgeRequiredId String?
  badgeRequired Badge?    @relation("BadgeRequirement", fields: [badgeRequiredId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  claimedBy     ClaimedReward[]
}

model EarnedBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  badge     Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model EarnedCertificate {
  id            String   @id @default(cuid())
  userId        String
  certificateId String
  earnedAt      DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  certificate   Certificate @relation(fields: [certificateId], references: [id])

  @@unique([userId, certificateId])
}

model ClaimedReward {
  id        String   @id @default(cuid())
  userId    String
  rewardId  String
  claimedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  reward    Reward   @relation(fields: [rewardId], references: [id])

  @@unique([userId, rewardId])
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  taskId      String
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?      // For quiz-type tasks
  timeSpent   Int?      // in seconds
  answers     Json?     // Store user's answers
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}

model Referral {
  id            String    @id @default(cuid())
  referrerId    String
  referredEmail String
  status        String    @default("pending") // pending, accepted, declined
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  referrer      User      @relation("ReferredBy", fields: [referrerId], references: [id])
} 